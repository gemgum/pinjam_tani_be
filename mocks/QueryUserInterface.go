// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	users "pinjamtani_project/internal/features/users"

	mock "github.com/stretchr/testify/mock"
)

// QueryUserInterface is an autogenerated mock type for the QueryUserInterface type
type QueryUserInterface struct {
	mock.Mock
}

// AccountByEmail provides a mock function with given fields: email
func (_m *QueryUserInterface) AccountByEmail(email string) (*users.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for AccountByEmail")
	}

	var r0 *users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*users.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *users.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountById provides a mock function with given fields: userid
func (_m *QueryUserInterface) AccountById(userid uint) (*users.User, error) {
	ret := _m.Called(userid)

	if len(ret) == 0 {
		panic("no return value specified for AccountById")
	}

	var r0 *users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*users.User, error)); ok {
		return rf(userid)
	}
	if rf, ok := ret.Get(0).(func(uint) *users.User); ok {
		r0 = rf(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccount provides a mock function with given fields: account
func (_m *QueryUserInterface) CreateAccount(account users.User) (uint, error) {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(users.User) (uint, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(users.User) uint); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(users.User) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccount provides a mock function with given fields: userid
func (_m *QueryUserInterface) DeleteAccount(userid uint) error {
	ret := _m.Called(userid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccount provides a mock function with given fields: userid, account
func (_m *QueryUserInterface) UpdateAccount(userid uint, account users.User) error {
	ret := _m.Called(userid, account)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, users.User) error); ok {
		r0 = rf(userid, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQueryUserInterface creates a new instance of QueryUserInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryUserInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryUserInterface {
	mock := &QueryUserInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
