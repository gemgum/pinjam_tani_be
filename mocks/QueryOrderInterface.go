// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	order "projectBE23/internal/features/orders"

	mock "github.com/stretchr/testify/mock"
)

// QueryOrderInterface is an autogenerated mock type for the QueryOrderInterface type
type QueryOrderInterface struct {
	mock.Mock
}

// AddOrderItems provides a mock function with given fields: orderItemData, orderStatusData
func (_m *QueryOrderInterface) AddOrderItems(orderItemData order.OrderItemEntity, orderStatusData order.OrderStatusEntity) (uint, uint, error) {
	ret := _m.Called(orderItemData, orderStatusData)

	if len(ret) == 0 {
		panic("no return value specified for AddOrderItems")
	}

	var r0 uint
	var r1 uint
	var r2 error
	if rf, ok := ret.Get(0).(func(order.OrderItemEntity, order.OrderStatusEntity) (uint, uint, error)); ok {
		return rf(orderItemData, orderStatusData)
	}
	if rf, ok := ret.Get(0).(func(order.OrderItemEntity, order.OrderStatusEntity) uint); ok {
		r0 = rf(orderItemData, orderStatusData)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(order.OrderItemEntity, order.OrderStatusEntity) uint); ok {
		r1 = rf(orderItemData, orderStatusData)
	} else {
		r1 = ret.Get(1).(uint)
	}

	if rf, ok := ret.Get(2).(func(order.OrderItemEntity, order.OrderStatusEntity) error); ok {
		r2 = rf(orderItemData, orderStatusData)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AddOrderStatuses provides a mock function with given fields: orderData
func (_m *QueryOrderInterface) AddOrderStatuses(orderData order.OrderStatusEntity) error {
	ret := _m.Called(orderData)

	if len(ret) == 0 {
		panic("no return value specified for AddOrderStatuses")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(order.OrderStatusEntity) error); ok {
		r0 = rf(orderData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrderQtyProduct provides a mock function with given fields: id
func (_m *QueryOrderInterface) GetOrderQtyProduct(id uint) (uint, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderQtyProduct")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (uint, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) uint); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: userid
func (_m *QueryOrderInterface) GetOrders(userid uint) (order.ListOrderItemEntity, error) {
	ret := _m.Called(userid)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 order.ListOrderItemEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (order.ListOrderItemEntity, error)); ok {
		return rf(userid)
	}
	if rf, ok := ret.Get(0).(func(uint) order.ListOrderItemEntity); ok {
		r0 = rf(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(order.ListOrderItemEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewQueryOrderInterface creates a new instance of QueryOrderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryOrderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryOrderInterface {
	mock := &QueryOrderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
