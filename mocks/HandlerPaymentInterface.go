// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	payment "projectBE23/internal/features/payments"
)

// HandlerPaymentInterface is an autogenerated mock type for the HandlerPaymentInterface type
type HandlerPaymentInterface struct {
	mock.Mock
}

// ProcessPayment provides a mock function with given fields: dataPayment
func (_m *HandlerPaymentInterface) ProcessPayment(dataPayment payment.PaymentEntity) (payment.MidtransData, error) {
	ret := _m.Called(dataPayment)

	if len(ret) == 0 {
		panic("no return value specified for ProcessPayment")
	}

	var r0 payment.MidtransData
	var r1 error
	if rf, ok := ret.Get(0).(func(payment.PaymentEntity) (payment.MidtransData, error)); ok {
		return rf(dataPayment)
	}
	if rf, ok := ret.Get(0).(func(payment.PaymentEntity) payment.MidtransData); ok {
		r0 = rf(dataPayment)
	} else {
		r0 = ret.Get(0).(payment.MidtransData)
	}

	if rf, ok := ret.Get(1).(func(payment.PaymentEntity) error); ok {
		r1 = rf(dataPayment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusOrderMidtrans provides a mock function with given fields:
func (_m *HandlerPaymentInterface) UpdateStatusOrderMidtrans() echo.HandlerFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusOrderMidtrans")
	}

	var r0 echo.HandlerFunc
	if rf, ok := ret.Get(0).(func() echo.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.HandlerFunc)
		}
	}

	return r0
}

// NewHandlerPaymentInterface creates a new instance of HandlerPaymentInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlerPaymentInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlerPaymentInterface {
	mock := &HandlerPaymentInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
