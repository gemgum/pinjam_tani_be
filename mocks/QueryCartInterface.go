// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	carts "pinjamtani_project/internal/features/carts"

	mock "github.com/stretchr/testify/mock"
)

// QueryCartInterface is an autogenerated mock type for the QueryCartInterface type
type QueryCartInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *QueryCartInterface) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *QueryCartInterface) GetAll() ([]carts.CartEntity, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []carts.CartEntity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]carts.CartEntity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []carts.CartEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]carts.CartEntity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *QueryCartInterface) GetById(id uint) (carts.CartEntity, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 carts.CartEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (carts.CartEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) carts.CartEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(carts.CartEntity)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: cart
func (_m *QueryCartInterface) Insert(cart carts.CartEntity) (carts.CartEntity, error) {
	ret := _m.Called(cart)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 carts.CartEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(carts.CartEntity) (carts.CartEntity, error)); ok {
		return rf(cart)
	}
	if rf, ok := ret.Get(0).(func(carts.CartEntity) carts.CartEntity); ok {
		r0 = rf(cart)
	} else {
		r0 = ret.Get(0).(carts.CartEntity)
	}

	if rf, ok := ret.Get(1).(func(carts.CartEntity) error); ok {
		r1 = rf(cart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, cart
func (_m *QueryCartInterface) Update(id uint, cart carts.CartEntity) error {
	ret := _m.Called(id, cart)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, carts.CartEntity) error); ok {
		r0 = rf(id, cart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQueryCartInterface creates a new instance of QueryCartInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryCartInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryCartInterface {
	mock := &QueryCartInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
