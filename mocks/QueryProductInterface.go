// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	products "pinjamtani_project/internal/features/products"

	mock "github.com/stretchr/testify/mock"
)

// QueryProductInterface is an autogenerated mock type for the QueryProductInterface type
type QueryProductInterface struct {
	mock.Mock
}

// DecreaseProduct provides a mock function with given fields: id, sum
func (_m *QueryProductInterface) DecreaseProduct(id uint, sum uint) error {
	ret := _m.Called(id, sum)

	if len(ret) == 0 {
		panic("no return value specified for DecreaseProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(id, sum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *QueryProductInterface) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: page, pageSize
func (_m *QueryProductInterface) GetAll(page int, pageSize int) ([]products.ProductsEntity, error) {
	ret := _m.Called(page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []products.ProductsEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]products.ProductsEntity, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []products.ProductsEntity); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]products.ProductsEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductById provides a mock function with given fields: id
func (_m *QueryProductInterface) GetProductById(id uint) (*products.ProductsEntity, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductById")
	}

	var r0 *products.ProductsEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*products.ProductsEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *products.ProductsEntity); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.ProductsEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByName provides a mock function with given fields: productName
func (_m *QueryProductInterface) GetProductByName(productName string) ([]products.ProductsEntity, error) {
	ret := _m.Called(productName)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByName")
	}

	var r0 []products.ProductsEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]products.ProductsEntity, error)); ok {
		return rf(productName)
	}
	if rf, ok := ret.Get(0).(func(string) []products.ProductsEntity); ok {
		r0 = rf(productName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]products.ProductsEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(productName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProducts provides a mock function with given fields: userID, page, pageSize
func (_m *QueryProductInterface) GetUserProducts(userID uint, page int, pageSize int) ([]products.ProductsEntity, error) {
	ret := _m.Called(userID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProducts")
	}

	var r0 []products.ProductsEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]products.ProductsEntity, error)); ok {
		return rf(userID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []products.ProductsEntity); ok {
		r0 = rf(userID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]products.ProductsEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(userID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: product
func (_m *QueryProductInterface) Insert(product products.ProductsEntity) (uint, error) {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(products.ProductsEntity) (uint, error)); ok {
		return rf(product)
	}
	if rf, ok := ret.Get(0).(func(products.ProductsEntity) uint); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(products.ProductsEntity) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectById provides a mock function with given fields: id
func (_m *QueryProductInterface) SelectById(id uint) (*products.ProductsEntity, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SelectById")
	}

	var r0 *products.ProductsEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*products.ProductsEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *products.ProductsEntity); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.ProductsEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, product
func (_m *QueryProductInterface) Update(id uint, product products.ProductsEntity) error {
	ret := _m.Called(id, product)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, products.ProductsEntity) error); ok {
		r0 = rf(id, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQueryProductInterface creates a new instance of QueryProductInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryProductInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryProductInterface {
	mock := &QueryProductInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
